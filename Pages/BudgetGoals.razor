@page "/budget-goals"
@using FS.Data
@using FS.Shared.Services
@inject IBudgetGoalService BudgetGoalService

<h3>Budget Goals</h3>

@if (BudgetGoals != null && BudgetGoals.Any())
{
    <table>
        <thead>
            <tr>
                <th>Category</th>
                <th>Amount</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Completed</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var goal in BudgetGoals)
            
                <tr>
                    <td>@goal.Category</td>
    <td>@goal.Amount.ToString("C")</td>
    <td>@goal.StartDate.ToShortDateString()</td>
    <td>@goal.EndDate.ToShortDateString()</td>
    <td>@(goal.IsCompleted ? "Yes" : "No")</td>
    <td>
        <button @onclick="() => DeleteBudgetGoal(goal.Id)">Delete</button>
        <button @onclick="() => EditBudgetGoal(goal.Id)">Edit</button>
    </td>
</tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No budget goals available.</p>
}

<!-- Add/Edit goal form -->
@if (showGoalForm)
{
    <form @onsubmit="SaveGoal">
        <label>Category:</label>
        <input type="text" @bind="selectedGoal.Category" /><br />

        <label>Amount:</label>
        <input type="number" step="0.01" @bind="selectedGoal.Amount" /><br />

        <label>Start Date:</label>
        <input type="date" @bind="selectedGoal.StartDate" /><br />

        <label>End Date:</label>
        <input type="date" @bind="selectedGoal.EndDate" /><br />

        <label>Completed:</label>
        <input type="checkbox" @bind="selectedGoal.IsCompleted" /><br />

        <button type="submit">@((selectedGoal.Id == 0) ? "Add Goal" : "Update Goal")</button>
        <button @onclick="Cancel">Cancel</button>
    </form>
}
else
{
    <button @onclick="AddNewGoal">Add New Goal</button>
}

@code {
    List<BudgetGoals> BudgetGoals { get; set; }
    BudgetGoals selectedGoal { get; set; } = new BudgetGoals();
    bool showGoalForm { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        BudgetGoals = await BudgetGoalService.GetBudgetGoals();
    }

    private async Task SaveGoal()
    {
        if (selectedGoal.Id == 0)
        {
            await BudgetGoalService.AddBudgetGoal(selectedGoal);
        }
        else
        {
            await BudgetGoalService.UpdateBudgetGoal(selectedGoal);
        }

        BudgetGoals = await BudgetGoalService.GetBudgetGoals();
        selectedGoal = new BudgetGoals(); // Reset selected goal
        showGoalForm = false;
    }

    private async Task DeleteBudgetGoal(int goalId)
    {
        await BudgetGoalService.DeleteBudgetGoal(goalId);
        BudgetGoals = await IBudgetGoalService.GetBudgetGoals();
    }

    private void EditBudgetGoal(int goalId)
    {
        selectedGoal = BudgetGoals.FirstOrDefault(g => g.Id == goalId);
        showGoalForm = true;
    }

    private void AddNewGoal()
    {
        selectedGoal = new BudgetGoals();
        showGoalForm = true;
    }

    private void Cancel()
    {
        selectedGoal = new BudgetGoals();
        showGoalForm = false;
    }
}

